# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import json
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QWidget, QPushButton, QLineEdit,
                             QInputDialog, QApplication)
from win2 import  Ui_Win2
from  win3 import  Ui_Win3
from  win4 import  Ui_Win4



class Ui_Win1(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(331, 373)
        # Dialog.resize(331, 373)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setStyleSheet("background-color:#e6ffff")
        self.label = QtWidgets.QLabel(Dialog)
        # self.setWindowIcon(QtGui.QIcon('logo.png'))
        self.label.setGeometry(QtCore.QRect(100, 80, 151, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(26)
        self.label.setFont(font)
        self.label.setStyleSheet("color:#006080;")
        self.label.setObjectName("label")
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 190, 311, 171))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.add_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.add_button.sizePolicy().hasHeightForWidth())
        self.add_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.add_button.setFont(font)
        self.add_button.setStyleSheet("QPushButton{\n"
                                      "    color:#006080;\n"
                                      "    background-color:#ccf2ff;\n"
                                      "    border: none;\n"
                                      "    \n"
                                      "}\n"
                                      "QPushButton:hover{\n"
                                      "    color:#ffd9b3;\n"
                                      "    background-color:#006080;\n"
                                      "}\n"
                                      "QPushButton:pressed{\n"
                                      "    color:#ff9933;\n"
                                      "    background-color:#006080;\n"
                                      "}")
        self.add_button.setObjectName("add_button")
        self.verticalLayout.addWidget(self.add_button)
        self.decide_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.decide_button.sizePolicy().hasHeightForWidth())
        self.decide_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.decide_button.setFont(font)
        self.decide_button.setStyleSheet("QPushButton{\n"
                                         "    color:#006080;\n"
                                         "    background-color:#ccf2ff;\n"
                                         "    border: none;\n"
                                         "    \n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    color:#ffd9b3;\n"
                                         "    background-color:#006080;\n"
                                         "}\n"
                                         "QPushButton:pressed{\n"
                                         "    color:#ff9933;\n"
                                         "    background-color:#006080;\n"
                                         "}")
        self.decide_button.setObjectName("decide_button")
        self.verticalLayout.addWidget(self.decide_button)
        self.look_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.look_button.sizePolicy().hasHeightForWidth())
        self.look_button.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.look_button.setFont(font)
        self.look_button.setStyleSheet("QPushButton{\n"
                                       "    color:#006080;\n"
                                       "    background-color:#ccf2ff;\n"
                                       "    border: none;\n"
                                       "    \n"
                                       "}\n"
                                       "QPushButton:hover{\n"
                                       "    color:#ffd9b3;\n"
                                       "    background-color:#006080;\n"
                                       "}\n"
                                       "QPushButton:pressed{\n"
                                       "    color:#ff9933;\n"
                                       "    background-color:#006080;\n"
                                       "}")
        self.look_button.setObjectName("look_button")
        self.verticalLayout.addWidget(self.look_button)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(2, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        Dialog.setTabOrder(self.add_button, self.decide_button)
        Dialog.setTabOrder(self.decide_button, self.look_button)

        self.funk()




    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Test"))
        self.label.setText(_translate("Dialog", "Тесты"))
        self.add_button.setText(_translate("Dialog", "ДОБАВИТЬ"))
        self.decide_button.setText(_translate("Dialog", "РЕШИТЬ"))
        self.look_button.setText(_translate("Dialog", "ПРОСМОТРЕТЬ"))

    def funk(self):
        self.add_button.clicked.connect(self.push_button_one)
        self.decide_button.clicked.connect(self.push_button_two)
        self.look_button.clicked.connect(self.push_button_three)

    def push_button_one(self):
        Dialog1.close()
        Dialog4.show()

        # запись и возрать название теста(json file)
        def input_chois_test():
            chois_test = ui4.edit_test.text()
            return  chois_test

        #  Нажатие "ok" , переход на второе окно
        def pushbutton_return_one_ok():
            # input_chois_test()
            Dialog4.close()
            Dialog2.show()

        # Нажатие "cancel" возрат на первое окно
        def pushbutton_return_one_cancle():
            Dialog4.close()
            Dialog1.show()

        # Подключение кнопок
        ui4.ok_button.clicked.connect(pushbutton_return_one_ok)
        ui4.cancel_button.clicked.connect(pushbutton_return_one_cancle)
        # Ввод вопроса и фооматирование его под json file
        def input_question():
            question = []
            answer = []
            true_answer =[]
            # запись в перменные
            question.append(ui2.text_quest.toPlainText())
            answer.append(list(ui2.text_answer.toPlainText().split('\n')))
            true_answer.append(ui2.text_true_answer.toPlainText())

            quest = {"quests":question,
                     "answer":answer,
                     "true_answer":true_answer
                     }

            to_json = {'test': quest}
            # использование фунцкии input_chois_test, для ввода
            # названия теста
            json_file = '{0}.json'.format(input_chois_test())
            print(json_file)

            # если тест есть и к нему есть доступ то,
            # скачиваем и добавляем к нему инфу и сохраныяем,
            # а если нету создаем новый
            if os.path.isfile(json_file) and os.access(json_file,os.R_OK):
                with open(json_file) as f:
                    data = json.load(f)

                data['test']['quests'].extend(question)
                data['test']['answer'].extend(answer)
                data['test']['true_answer'].extend(true_answer)
                print(data)

                with open(json_file, 'w') as f:
                    json.dump(data, f,sort_keys=True, indent=3,ensure_ascii=False )

            else:
                with open(json_file, 'w') as f:
                    json.dump(to_json, f,sort_keys=True, indent=3,ensure_ascii=False)


        # Нажатие "дабвить", сохранение json file и преход на первое окно
        def pushbutton_return_add():
            input_question()
            Dialog2.close()
            Dialog1.show()

        # Подключение кнопоки
        ui2.button_add.clicked.connect(pushbutton_return_add)


    def push_button_two(self):
        Dialog1.close()
        Dialog4.show()

        # запись и возрать название теста(json file)
        def input_chois_test():
            chois_test = ui4.edit_test.text()
            return  chois_test

        #  Нажатие "ok" , переход на второе окно
        def pushbutton_return_one_ok():
            Dialog4.close()
            Dialog3.show()
            # output()

        # Нажатие "cancel" возрат на первое окно
        def pushbutton_return_one_cancle():
            # input_chois_test()
            Dialog4.close()
            Dialog1.show()

        # Подключение кнопок
        ui4.ok_button.clicked.connect(pushbutton_return_one_ok)
        ui4.cancel_button.clicked.connect(pushbutton_return_one_cancle)

        def output():
            json_file = '{0}.json'.format(input_chois_test())
            with open(json_file) as f:
                templates = json.load(f)
            # while x <= len((templates["test"]["quests"])):
            quest = iter(templates["test"]["quests"])
            # ui3.label_2.setText(quest[x])
            print(quest)
            answer = templates["test"]['answer'][0]
            ui3.radioButton.setText(str(answer[0]))
            ui3.radioButton_2.setText(str(answer[1]))
            ui3.radioButton_3.setText(str(answer[2]))

        def on_click(i):
            i = i +1
            print("i:",i)
            return i
        x = 0
        def pushbutton_return_next(i):
            i = i +1
            print("i:",i)
            return i

        ui3.pushButton.clicked.connect(lambda: pushbutton_return_next(x))
        print("x: ",x)


    def push_button_three(self):
        Dialog1.close()
        Dialog3.show()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    Dialog1 = QtWidgets.QDialog()
    ui1 = Ui_Win1()
    ui1.setupUi(Dialog1)

    Dialog2 = QtWidgets.QDialog()
    ui2 = Ui_Win2()
    ui2.setupUi(Dialog2)

    Dialog4 = QtWidgets.QDialog()
    ui4 = Ui_Win4()
    ui4.setupUi(Dialog4)

    Dialog3 = QtWidgets.QDialog()
    ui3 = Ui_Win3()
    ui3.setupUi(Dialog3)

    Dialog1.show()
    sys.exit(app.exec_())

